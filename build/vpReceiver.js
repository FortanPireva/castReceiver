(()=>{"use strict";function e(e,t){let s=new class{constructor(e,t){this.context=null,this.playerManager=null,this.castDebugLogger=null,this.appId=t.appId,this.video=document.querySelector(e),this.playbackConfig=null,this.controls=null,this.hls=null,this.videoObject={},this.videoContainer=this.video.parentElement,this.playbackRate=1,this.autoplay=!1,this.receiverControls=new class{constructor(e){this.seekbar=new class{constructor(e){this.element=document.querySelector(e),this.castdebugger=null,this.show=!1}setCastDebugger(e){this.castdebugger=e}setProgress(e,t){this.element.style.width=e/t*100+"%"}showHide(e){this.castdebugger.debug("showHide",`${e} ${this.show}`),this.show?this.element.parentElement.style.display="block":setTimeout((()=>{this.element.parentElement.style.display="none"}),e)}}(".seekbar-progress"),this.timer=new class{constructor(e){this.element=document.querySelector(e)}update(e,t){let s=Math.floor(e/60);1==s.length&&(s="0"+s),e%=60;let i=Math.floor(t/60);1==i.length&&(i="0"+i),this.element.innerHtml=`${s}:${e} / ${i}:${t}`}}(".timer"),this.castDebugger=null,this.element=document.querySelector(e),this.show=!0}setCastDebugger(e){this.castDebugger=e,this.seekbar.setCastDebugger(this.castDebugger)}update(e){this.seekbar.setProgress(e.currenTtime,e.duration),this.timer.update(e.currenTtime,e.duration)}hideControls(e){this.show=!1,this.showHide(e||5e3)}showControls(){this.show=!0,this.showHide(10)}showHide(e){this.show?this.element.style.display="block":setTimeout((()=>{this.element.style.display="none"}),e)}}(".controls"),this.mediaManager=null,this.castReceiverManager=null}start(){this.onPlay()}onPlay(){this.video.play().then((()=>{})).catch((()=>{})),this.receiverControls.hideControls(6e3)}onPause(){this.video.pause(),this.receiverControls.showControls()}addPlayerEvents(){this.video.addEventListener("timeupdate",this.onTimeUpdate)}onTimeUpdate(){this.receiverControls.update(this.updatePlayerState())}updatePlayerState(){return{currentTime:this.video.currentTime,duration:this.videoObject.duration}}attachMedia(){if(vpReceiver.HLSsupported=Hls.isSupported(),this.castDebugLogger.debug("inside attach media",vpReceiver.HLSsupported),this.video.playbackRate=1,this.castDebugLogger.debug("video file",JSON.stringify(this.video,["id","className","tagName"])),this.videoObject.file.endsWith("mp4"))this.castDebugLogger.debug("inside mp4",this.videoObject.file),this.video.src=this.videoObject.file,this.start();else if(vpReceiver.HLSsupported){this.castDebugLogger.debug("inside hlssupported",this.videoObject.file);try{this.hls=new Hls,this.castDebugLogger.debug("hls initialized",this.videoObject.file),this.hls.attachMedia(this.video),this.castDebugLogger.debug("attached media",this.videoObject.file),this.hls.on(Hls.Events.MEDIA_ATTACHED,(()=>{this.castDebugLogger.debug("amedia attached",this.videoObject.file),this.hls.startLevel=0,this.castDebugLogger.debug("loading source hlssupported",this.videoObject.file),this.hls.loadSource(this.videoObject.file)})),this.hls.on(Hls.Events.MANIFEST_PARSED,((e,t)=>{this.castDebugLogger.debug("manifest parsed",this.videoObject.file),this.start()})),this.hls.on(Hls.Events.ERROR,((e,t)=>{this.castDebugLogger.debug("HLS  ERROR",t.details)}))}catch(e){this.castDebugLogger.debug("hls error",e)}}this.castDebugLogger.debug("finished attach media")}fakeinit(){const e=cast.framework.CastReceiverContext.getInstance();e.getPlayerManager(),this.castDebugLogger={debug:function(e,t){console.debug(e,t)}},this.receiverControls.setCastDebugger(this.castDebugLogger),this.videoObject.file="https://vp.gjirafa.net/vps/prod/odgehtyo/encode/vjsmylds/mp4/360p.mp4",this.attachMedia(),this.bindMethods(),this.addPlayerEvents(),e.start()}init(){this.context=cast.framework.CastReceiverContext.getInstance(),this.context.setLoggerLevel(cast.framework.LoggerLevel.DEBUG),this.playerManager=this.context.getPlayerManager(),this.playerManager.setMediaElement(this.video),this.castDebugLogger=cast.debug.CastDebugLogger.getInstance(),this.castDebugLogger.setEnabled(!0),this.castDebugLogger.debug("hello","okej"),this.receiverControls.setCastDebugger(this.castDebugLogger),this.context.start(),this.bindMethods(),this.bindInterceptors(),this.addPlayerEvents()}onSeek(e){var t=e.data.currentTime;this.video.currentTime=t,this.receiverControls.update(this.updatePlayerState())}drawButtons(){this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_SECONDARY_1,cast.framework.ui.ControlsButton.QUEUE_PREV),this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_PRIMARY_1,cast.framework.ui.ControlsButton.CAPTIONS),this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_PRIMARY_2,cast.framework.ui.ControlsButton.SEEK_FORWARD_15),this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_SECONDARY_2,cast.framework.ui.ControlsButton.QUEUE_NEXT)}bindInterceptors(){this.playerManager.setMessageInterceptor(cast.framework.messages.MessageType.LOAD,this.onLoadRequest.bind(this)),this.playerManager.setMessageInterceptor(cast.framework.messages.MessageType.PLAY,this.onPlay.bind(this)),this.playerManager.setMessageInterceptor(cast.framework.messages.MessageType.PAUSE,this.onPause.bind(this))}bindMethods(){this.bindInterceptors=this.bindInterceptors.bind(this),this.onLoadRequest=this.onLoadRequest.bind(this),this.attachMedia=this.attachMedia.bind(this),this.start=this.start.bind(this),this.addPlayerEvents=this.addPlayerEvents.bind(this),this.onTimeUpdate=this.onTimeUpdate.bind(this),this.onPlay=this.onPlay.bind(this),this.onPause=this.onPause.bind(this),this.updatePlayerState=this.updatePlayerState.bind(this)}onLoadRequest(e){return this.castDebugLogger.debug("VPreceiver",e.media.contentId),this.castDebugLogger.debug("VPreceiver1",Hls.isSupported()),this.videoObject.file=e.media.contentId,this.videoObject.duration=e.media.metadata.duration,this.currentTime=e.currentTime,this.playbackRate=e.playbackRate,this.autoplay=e.autoplay,this.attachMedia(),null}addBreaks(e){return castDebugLogger.debug(LOG_RECEIVER_TAG,"addBreaks: "+JSON.stringify(e)),fetchMediaById("fbb_ad").then((t=>{e.breakClips=[{id:"fbb_ad",title:t.title,contentUrl:t.stream.dash,contentType:"application/dash+xml",whenSkippable:5}],e.breaks=[{id:"pre-roll",breakClipIds:["fbb_ad"],position:0}]}))}fetchMediaById(e){return castDebugLogger.debug(LOG_RECEIVER_TAG,"fetching id: "+e),new Promise(((t,s)=>{fetch(CONTENT_URL).then((e=>e.json())).then((i=>{i?i[e]?t(i[e]):s(`${e} not found in repository`):s("Content repository not found.")}))}))}}(e,t);return s.init(),s}e.HLSsupported=!1,window.vpReceiver=e})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,