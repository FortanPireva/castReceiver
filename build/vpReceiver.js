(()=>{"use strict";function t(t,e){new class{constructor(t,e){this.context=null,this.playerManager=null,this.castDebugLogger=null,this.appId=e.appId,this.video=document.querySelector(t),this.playbackConfig=null,this.controls=null,this.hls=null,this.videoObject={},this.videoContainer=this.video.parentElement}start(){this.play()}play(){this.video.play().then((()=>{})).catch((()=>{}))}attachMedia(){if(vpReceiver.HLSsupported=Hls.isSupported(),this.castDebugLogger.debug("inside attach media",vpReceiver.HLSsupported),this.video.playbackRate=1,this.castDebugLogger.debug("video file",JSON.stringify(this.video,["id","className","tagName"])),this.videoObject.file.endsWith("mp4"))this.castDebugLogger.debug("inside mp4",this.videoObject.file),this.video.src=this.videoObject.file,this.start();else if(vpReceiver.HLSsupported){this.castDebugLogger.debug("inside hlssupported",this.videoObject.file);try{this.hls=new Hls,this.castDebugLogger.debug("hls initialized",this.videoObject.file),this.hls.attachMedia(this.video),this.castDebugLogger.debug("attached media",this.videoObject.file),this.hls.on(Hls.Events.MEDIA_ATTACHED,(()=>{this.castDebugLogger.debug("amedia attached",this.videoObject.file),this.hls.startLevel=0,this.castDebugLogger.debug("loading source hlssupported",this.videoObject.file),this.hls.loadSource(this.videoObject.file)})),this.hls.on(Hls.Events.MANIFEST_PARSED,((t,e)=>{this.castDebugLogger.debug("manifest parsed",this.videoObject.file),this.start()})),this.hls.on(Hls.Events.ERROR,((t,e)=>{this.castDebugLogger.debug("HLS  ERROR",e.details)}))}catch(t){this.castDebugLogger.debug("hls error",t)}}this.castDebugLogger.debug("finished attach media")}fakeinit(){const t=cast.framework.CastReceiverContext.getInstance();t.getPlayerManager(),this.videoObject.file="https://vp.gjirafa.net/vps/prod/odgehtyo/encode/vjsmylds/mp4/360p.mp4",this.attachMedia(),t.start()}init(){this.context=cast.framework.CastReceiverContext.getInstance(),this.playerManager=this.context.getPlayerManager(),this.playerManager.setMediaElement(this.video),this.castDebugLogger=cast.debug.CastDebugLogger.getInstance(),this.context.start(),this.bindMethods(),this.bindInterceptors()}drawButtons(){this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_SECONDARY_1,cast.framework.ui.ControlsButton.QUEUE_PREV),this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_PRIMARY_1,cast.framework.ui.ControlsButton.CAPTIONS),this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_PRIMARY_2,cast.framework.ui.ControlsButton.SEEK_FORWARD_15),this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_SECONDARY_2,cast.framework.ui.ControlsButton.QUEUE_NEXT)}bindInterceptors(){this.playerManager.setMessageInterceptor(cast.framework.messages.MessageType.LOAD,this.onLoadRequest.bind(this))}bindMethods(){this.bindInterceptors=this.bindInterceptors.bind(this),this.onLoadRequest=this.onLoadRequest.bind(this),this.attachMedia=this.attachMedia.bind(this)}onLoadRequest(t){return this.castDebugLogger.debug("VPreceiver",t.media.contentId),this.castDebugLogger.debug("VPreceiver1",Hls.isSupported()),this.videoObject.file=t.media.contentId,this.attachMedia(),null}addBreaks(t){return castDebugLogger.debug(LOG_RECEIVER_TAG,"addBreaks: "+JSON.stringify(t)),fetchMediaById("fbb_ad").then((e=>{t.breakClips=[{id:"fbb_ad",title:e.title,contentUrl:e.stream.dash,contentType:"application/dash+xml",whenSkippable:5}],t.breaks=[{id:"pre-roll",breakClipIds:["fbb_ad"],position:0}]}))}fetchMediaById(t){return castDebugLogger.debug(LOG_RECEIVER_TAG,"fetching id: "+t),new Promise(((e,s)=>{fetch(CONTENT_URL).then((t=>t.json())).then((i=>{i?i[t]?e(i[t]):s(`${t} not found in repository`):s("Content repository not found.")}))}))}}(t,e).init()}t.HLSsupported=!1,window.vpReceiver=t})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,