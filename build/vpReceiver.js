(()=>{"use strict";const t=class{constructor(t,e){this.context=null,this.playerManager=null,this.castDebugLogger=null,this.appId=e.appId,this.video=document.querySelector(t),this.playbackConfig=null,this.controls=null,this.hls=null,this.videoObject=null}start(){this.play()}play(){this.video.play().then((()=>{alert("playing")})).catch((()=>{}))}attachMedia(){vpPlayer.HLSsupported=Hls.isSupported(),this.video.playbackRate=1,this.videoObject.file.endsWith("mp4")?(this.video.src=this.videoObject.file,this.start()):vpPlayer.HLSsupported&&!Utils.isIOS()?(this.hls=new Hls(config),this.hls.attachMedia(this.video),this.hls.on(Hls.Events.MEDIA_ATTACHED,(()=>{this.hls.startLevel=this.videoObject.live?0:Utils.getStartLevel(this.videoObject.duration),this.hls.loadSource(this.videoObject.file),this.seekToLive=!0})),this.hls.on(Hls.Events.MANIFEST_PARSED,((t,e)=>{Utils.isSafari()?(this.video.src=this.videoObject.file,fps_drm.init(this.video,config.fpsCertificateUrl,this.videoObject.assetId)):this.qualityLevels=this.hls.levels,this.start(),this.hls.loadLevel=null!=this.config.quality?Math.min(this.config.quality,this.hls.levels.length-1):-1,this.seekToLive=!0})),this.hls.on(Hls.Events.ERROR,((t,e)=>{if("manifestLoadError"===e.details&&(this.videoContainer.classList.add(cssClasses.effects.hideContent),this.videoContainer.classList.add(cssClasses.effects.showError)),"manifestLoadTimeOut"===e.details&&(this.videoContainer.classList.add(cssClasses.effects.hideContent),this.videoContainer.classList.add(cssClasses.effects.showError)),"manifestParsingError"===e.details&&(this.videoContainer.classList.add(cssClasses.effects.hideContent),this.videoContainer.classList.add(cssClasses.effects.showError)),"levelLoadError"===e.details&&this.removeLevel(e.context.level),"fragLoadError"===e.details&&(this.fragErrorCount++,0==e.frag.sn&&(this.failedToLoadFirstFragment=!0)),this.levelHasMissingFragments()&&(this.fragErrorCount=0,this.removeLevel(e.frag.level),this.hls.loadLevel=-1,console.log("Network error encountered")),this.failedToLoadFirstFragment&&(this.failedToLoadFirstFragment=!1,this.removeLevel(e.frag.level),this.hls.loadLevel=-1,this.onPlay(),console.log("Network error encountered")),e.fatal)switch(e.type){case Hls.ErrorTypes.NETWORK_ERROR:console.log("fatal network error encountered"),this.hls.startLoad();break;case Hls.ErrorTypes.MEDIA_ERROR:console.log("fatal media error encountered"),this.hls.recoverMediaError();break;default:this.hls.destroy()}}))):this.video.canPlayType("application/vnd.apple.mpegurl")&&(this.video.src=this.videoObject.file,Utils.isIOS()&&fps_drm.init(this.video,config.fpsCertificateUrl,this.videoObject.assetId),this.video.playsInline=!0,this.start())}fakeinit(){const t=cast.framework.CastReceiverContext.getInstance();t.getPlayerManager(),t.start()}init(){this.context=cast.framework.CastReceiverContext.getInstance(),this.playerManager=this.context.getPlayerManager(),this.castDebugLogger=cast.debug.CastDebugLogger.getInstance()}drawButtons(){this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_SECONDARY_1,cast.framework.ui.ControlsButton.QUEUE_PREV),this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_PRIMARY_1,cast.framework.ui.ControlsButton.CAPTIONS),this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_PRIMARY_2,cast.framework.ui.ControlsButton.SEEK_FORWARD_15),this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_SECONDARY_2,cast.framework.ui.ControlsButton.QUEUE_NEXT)}bindInterceptors(){this.playerManager.setMessageInterceptor(cast.framework.messages.MessageTyep.LOAD,this.onLoadRequest)}bindMethodd(){this.bindInterceptors=this.bindInterceptors.bind(this),this.init=this.init.bind(this),this.drawButtons=this.drawButtons.bind(this),this.onLoadRequest=this.onLoadRequest.bind(this),this.attachMedia=this.attachMedia.bind(this)}onLoadRequest(t){if(castDebugLogger.debug(LOG_RECEIVER_TAG,`loadRequestData: ${JSON.stringify(t)}`),!t||!t.media){const t=new cast.framework.messages.ErrorData(cast.framework.messages.ErrorType.LOAD_FAILED);return t.reason=cast.framework.messages.ErrorReason.INVALID_REQUEST,t}let e=t.media.contentUrl||t.media.entity||t.media.contentId;return this.videoObject.file=e,this.attachMedia(),t}addBreaks(t){return castDebugLogger.debug(LOG_RECEIVER_TAG,"addBreaks: "+JSON.stringify(t)),fetchMediaById("fbb_ad").then((e=>{t.breakClips=[{id:"fbb_ad",title:e.title,contentUrl:e.stream.dash,contentType:"application/dash+xml",whenSkippable:5}],t.breaks=[{id:"pre-roll",breakClipIds:["fbb_ad"],position:0}]}))}fetchMediaById(t){return castDebugLogger.debug(LOG_RECEIVER_TAG,"fetching id: "+t),new Promise(((e,s)=>{fetch(CONTENT_URL).then((t=>t.json())).then((i=>{i?i[t]?e(i[t]):s(`${t} not found in repository`):s("Content repository not found.")}))}))}};vpPlayer.HLSsupported=!1,window.vpReceiver=function(e,s){new t(e,s).fakeinit()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,