(()=>{"use strict";const e=e=>{if(!e)return"00:00";let t=Math.floor(e/3600),s=Math.floor((e-3600*t)/60),i=Math.floor(e%60);return t?t.toString().padStart(2,"0")+":"+s.toString().padStart(2,"0")+":"+i.toString().padStart(2,"0"):s.toString().padStart(2,"0")+":"+i.toString().padStart(2,"0")};class t{static DEBUG_VAST_SERVICE="DEBUG_VAST_SERVICE";constructor(e){this.receiver=e,this.adContainer=document.querySelector(".adContainer"),this.adsDisplayContainer=null,this.adsLoader=null,this.adsDisplayInitialized=!1,this.currentAds=null,this.initialized=!1,this.autoplayAllowed=!1,this.autoplayRequiresMuted=!1}init(){this.initialized=!0,google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED),this.adsDisplayContainer=new google.ima.AdDisplayContainer(this.adContainer,this.receiver.video),this.adsLoader=new google.ima.AdsLoader(this.adsDisplayContainer),this.adsLoader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED,this.onAdsManagerLoaded.bind(this),!1),this.adsLoader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR,this.onAdError,!1)}loadAds(e,s){this.currentAds={},this.initialized||this.init(),this.receiver.castDebugLogger.debug(t.DEBUG_VAST_SERVICE,"load "+e),e?(this.currentAds.content=e,this.currentAds.type="url"):s&&(this.currentAds.content=s,this.currentAds.type="xml"),this.currentAds.currentAdIndex=0,this.receiver.castDebugLogger.debug(t.DEBUG_VAST_SERVICE),"url"===this.currentAds.type?this.load(this.currentAds.content).bind(this):this.load(null,this.currentAds.content).bind(this)}onDoubleClick(e){}load(e,s){if(this.initialized||this.init(),this.receiver.castDebugLogger.debug(t.DEBUG_VAST_SERVICE,"Initialized"+this.vastUrl),this.adContainer.addEventListener("dblclick",this.onDoubleClick.bind(this)),this.adsRequest=new google.ima.AdsRequest,this.receiver.castDebugLogger.debug("okej e qity pra","pse"+e),e)this.adsRequest.adTagUrl=e;else{if(!s)return;this.adsRequest.adsResponse=s}this.receiver.castDebugLogger.debug("okej e qity pra","Asdfxx"),this.adsRequest.linearAdSlotWidth=this.receiver.video.clientWidth,this.adsRequest.linearAdSlotHeight=this.receiver.video.clientHeight,this.adsRequest.nonLinearAdSlotWidth=this.receiver.video.clientWidth,this.adsRequest.nonLinearAdSlotHeight=this.receiver.video.clientHeight/3,this.adsRequest.setAdWillAutoPlay(this.autoplayAllowed),this.adsRequest.setAdWillPlayMuted(this.autoplayRequiresMuted),this.receiver.castDebugLogger.debug("okej e qity pra","Asdf"),this.adsRequest.vastLoadTimeout=8e3,this.adsLoader.requestAds(this.adsRequest)}onAdsManagerLoaded(e){this.adsManager&&this.adsManager.destroy();const t=new google.ima.AdsRenderingSettings;this.adsManager=e.getAdsManager(this.receiver.video,t),this.playAds()}playAds(){this.adsDisplayInitialized||(this.adsDisplayContainer.initialize(),this.adsDisplayInitialized=!0);const e=this.receiver.video.clientWidth,t=this.receiver.video.clientHeight;try{this.adsManager.init(e,t,google.ima.ViewMode.FULLSCREEN),this.adsManager.start(),this.receiver.receiverControls.loader.style.display="none"}catch(e){console.log("AdsManager could not be started",e)}}onAdError(e){this.receiver.castDebugLogger.debug(t.DEBUG_VAST_SERVICE," ad error"+e)}}const s=t;function i(t,i){let a=new class{constructor(t,i){this.context=null,this.playerManager=null,this.castDebugLogger=null,this.appId=i.appId,this.video=document.querySelector(t),this.playbackConfig=null,this.controls=null,this.hls=null,this.videoObject={},this.videoContainer=this.video.parentElement,this.playbackRate=1,this.autoplay=!1,this.receiverControls=new class{constructor(t){this.seekbar=new class{constructor(e){this.element=document.querySelector(e),this.castdebugger=null,this.show=!1}setCastDebugger(e){this.castdebugger=e}setProgress(e,t){this.element.style.width=e/t*100+"%"}showHide(e){this.castdebugger.debug("showHide",`${e} ${this.show}`),this.show?this.element.parentElement.style.display="block":setTimeout((()=>{this.element.parentElement.style.display="none"}),e)}}(".seekbar-progress"),this.timer=new class{constructor(e){this.element=document.querySelector(e),this.element.textContent="00:00 / 00:00"}update(t,s){this.element.textContent=`${e(t)} /${e(s)}`}}(".timer"),this.castDebugger=null,this.element=document.querySelector(t),this.show=!0,this.loader=document.querySelector(".loader"),this.playIcon=document.querySelector(".vp-icon-play"),this.pauseIcon=document.querySelector(".vp-icon-pause")}setCastDebugger(e){this.castDebugger=e,this.seekbar.setCastDebugger(this.castDebugger)}pause(){this.pauseIcon.style.display="none",this.playIcon.style.display="block",setTimeout((()=>{this.playIcon.style.display="none"}),2e3)}play(){this.playIcon.style.display="none",this.pauseIcon.style.display="block",setTimeout((()=>{this.pauseIcon.style.display="none"}),2e3)}update(e){this.seekbar.setProgress(e.currentTime,e.duration),this.timer.update(e.currentTime,e.duration)}hideControls(e){this.show=!1,this.showHide(e||5e3)}showControls(){this.show=!0,this.showHide(10)}showHide(e){this.show?this.element.style.display="flex":setTimeout((()=>{this.element.style.display="none"}),e)}}(".controls"),this.mediaManager=null,this.castReceiverManager=null,this.videoStarted=!1,this.vastService=new s(this),this.config={},this.debugTags={LOAD_REQUEST:"LOAD_REQUEST",ATTACH_MEDIA:"ATTACH_MEDIA"}}start(){this.receiverControls.loader.style.display="none",this.onPlay()}onPlay(){this.castDebugLogger.debug("on play",this.video.getAttribute("src")),this.video.play().then((()=>{this.videoStarted?this.receiverControls.play():(this.receiverControls.showControls(),this.videoStarted=!0),this.receiverControls.hideControls(6e3)})).catch((()=>{}))}onPause(){this.playerManager.pause(),this.receiverControls.pause(),this.receiverControls.showControls()}addPlayerEvents(){this.video.addEventListener("timeupdate",this.onTimeUpdate),this.video.addEventListener("ended",this.onEnd.bind(this))}onEnd(){if(this.castDebugLogger.debug("on End",this.config.replay),this.config.replay)this.attachMedia();else{var e=document.createElement("p");e.textContent="no more videos",document.querySelector("body").append(e)}}onTimeUpdate(){this.receiverControls.update(this.updatePlayerState())}updatePlayerState(){return{currentTime:this.video.currentTime,duration:this.videoObject.duration}}attachMedia(){if(vpReceiver.HLSsupported=Hls.isSupported(),this.castDebugLogger.debug("inside attach media",vpReceiver.HLSsupported),this.video.playbackRate=1,this.castDebugLogger.debug("video file",JSON.stringify(this.video,["id","className","tagName"])),this.videoObject.file.endsWith("mp4"))this.castDebugLogger.debug("inside mp4",this.videoObject.file),this.video.src=this.videoObject.file,this.start();else if(vpReceiver.HLSsupported){this.castDebugLogger.debug("inside hlssupported",this.videoObject.file);try{this.hls=new Hls,this.castDebugLogger.debug("hls initialized",this.videoObject.file),this.currentTime>0&&(this.video.currentTime=this.currentTime),this.hls.attachMedia(this.video),this.castDebugLogger.debug("attached media",this.videoObject.file),this.hls.on(Hls.Events.MEDIA_ATTACHED,(()=>{this.castDebugLogger.debug("amedia attached",this.videoObject.file),this.hls.startLevel=0,this.castDebugLogger.debug("loading source hlssupported",this.videoObject.file),this.hls.loadSource(this.videoObject.file)})),this.hls.on(Hls.Events.MANIFEST_PARSED,((e,t)=>{this.start()})),this.hls.on(Hls.Events.ERROR,((e,t)=>{this.castDebugLogger.debug("HLS  ERROR",t.details)}))}catch(e){this.castDebugLogger.debug("hls error",e)}}this.castDebugLogger.debug("finished attach media")}fakeinit(){this.castDebugLogger={debug:function(e,t){console.log(e,t)},error:function(e,t){console.log(e,t)}},this.receiverControls.setCastDebugger(this.castDebugLogger),this.videoObject.file="https://vp.gjirafa.net/vps/prod/odgehtyo/encode/vjsmylds/mp4/360p.mp4",this.vastService.loadAds("https://vp-dev.gjirafa.net/vps/content/vast/preroll-2.xml"),this.bindMethods(),this.addPlayerEvents()}init(){this.context=cast.framework.CastReceiverContext.getInstance(),this.context.setLoggerLevel(cast.framework.LoggerLevel.DEBUG),this.playerManager=this.context.getPlayerManager(),this.playerManager.setMediaElement(this.video),this.castDebugLogger=cast.debug.CastDebugLogger.getInstance(),this.castDebugLogger.setEnabled(!0),this.castDebugLogger.debug("hello","okej"),this.receiverControls.setCastDebugger(this.castDebugLogger),this.context.start(),this.bindMethods(),this.bindInterceptors(),this.addPlayerEvents()}onSeek(e){this.video.currentTime=e.currentTime,this.receiverControls.showControls(),this.receiverControls.hideControls(6e3),this.receiverControls.update(this.updatePlayerState())}drawButtons(){this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_SECONDARY_1,cast.framework.ui.ControlsButton.QUEUE_PREV),this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_PRIMARY_1,cast.framework.ui.ControlsButton.CAPTIONS),this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_PRIMARY_2,cast.framework.ui.ControlsButton.SEEK_FORWARD_15),this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_SECONDARY_2,cast.framework.ui.ControlsButton.QUEUE_NEXT)}bindInterceptors(){this.playerManager.setMessageInterceptor(cast.framework.messages.MessageType.LOAD,this.onLoadRequest.bind(this)),this.playerManager.setMessageInterceptor(cast.framework.messages.MessageType.PLAY,this.onPlay.bind(this)),this.playerManager.setMessageInterceptor(cast.framework.messages.MessageType.PAUSE,this.onPause.bind(this)),this.playerManager.setMessageInterceptor(cast.framework.messages.MessageType.SEEK,this.onSeek.bind(this))}bindMethods(){this.bindInterceptors=this.bindInterceptors.bind(this),this.onLoadRequest=this.onLoadRequest.bind(this),this.attachMedia=this.attachMedia.bind(this),this.start=this.start.bind(this),this.addPlayerEvents=this.addPlayerEvents.bind(this),this.onTimeUpdate=this.onTimeUpdate.bind(this),this.onPlay=this.onPlay.bind(this),this.onPause=this.onPause.bind(this),this.updatePlayerState=this.updatePlayerState.bind(this)}onLoadRequest(e){this.castDebugLogger.debug("VPreceiver",e.media.contentId),this.castDebugLogger.debug("VPreceiver1",Hls.isSupported()),this.videoObject.file=e.media.contentId,this.videoObject.duration=e.media.metadata.duration,this.currentTime=e.currentTime,this.playbackRate=e.playbackRate,this.autoplay=e.autoplay;try{if(this.config.replay=void 0!==e.replay&&e.replay,this.castDebugLogger.info(this.debugTags.LOAD_REQUEST,"Before error "+e.customData.vastUrl),e.customData.vastUrl||e.customData.vastXml)return this.vastService.loadAds(e.customData.vastUrl,e.customData.vastXml),null;this.attachMedia()}catch(e){this.castDebugLogger.error(this.debugTags.LOAD_REQUEST,JSON.stringify(e)),this.castDebugLogger.info(this.debugTags.LOAD_REQUEST,"Config"+JSON.stringify(this.config)),this.attachMedia()}return null}addBreaks(e){return castDebugLogger.debug(LOG_RECEIVER_TAG,"addBreaks: "+JSON.stringify(e)),fetchMediaById("fbb_ad").then((t=>{e.breakClips=[{id:"fbb_ad",title:t.title,contentUrl:t.stream.dash,contentType:"application/dash+xml",whenSkippable:5}],e.breaks=[{id:"pre-roll",breakClipIds:["fbb_ad"],position:0}]}))}fetchMediaById(e){return castDebugLogger.debug(LOG_RECEIVER_TAG,"fetching id: "+e),new Promise(((t,s)=>{fetch(CONTENT_URL).then((e=>e.json())).then((i=>{i?i[e]?t(i[e]):s(`${e} not found in repository`):s("Content repository not found.")}))}))}}(t,i);return a.init(),a}i.HLSsupported=!1,window.vpReceiver=i})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,