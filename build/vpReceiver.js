(()=>{var e={782:e=>{e.exports={adTimeSliderColor:"yellow",timeSliderColor:"#194694"}},468:e=>{e.exports=class{constructor(e){this.receiver=e,this.enable=this.enable.bind(this),this.disable=this.disable.bind(this)}enable(){console.log(this.receiver.config.adTimeSliderColor),this.receiver.receiverControls.seekbar.setColor(this.receiver.config.adTimeSliderColor)}disable(){this.receiver.receiverControls.seekbar.setColor(this.receiver.config.timeSliderColor)}}}},t={};function s(i){var a=t[i];if(void 0!==a)return a.exports;var r=t[i]={exports:{}};return e[i](r,r.exports,s),r.exports}s.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return s.d(t,{a:t}),t},s.d=(e,t)=>{for(var i in t)s.o(t,i)&&!s.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:t[i]})},s.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),(()=>{"use strict";var e=s(782),t=s.n(e);const i={debug:!1,maxBufferSize:20971520,maxLoadingDelay:2,nudgeMaxRetry:2,liveSyncDurationCount:3,liveMaxLatencyDurationCount:1/0,manifestLoadingMaxRetry:1,manifestLoadingRetryDelay:1e3,manifestLoadingMaxRetryTimeout:2e3,emeEnabled:!0,widevineLicenseUrl:"https://widevine-dash.ezdrm.com/widevine-php/widevine-foreignkey.php?pX=90FC04"},a=e=>{if(!e)return"00:00";let t=Math.floor(e/3600),s=Math.floor((e-3600*t)/60),i=Math.floor(e%60);return t?t.toString().padStart(2,"0")+":"+s.toString().padStart(2,"0")+":"+i.toString().padStart(2,"0"):s.toString().padStart(2,"0")+":"+i.toString().padStart(2,"0")},r=class{constructor(e,t){this.seekbar=new class{constructor(e){this.element=document.querySelector(e),this.castdebugger=null,this.show=!1,this.speed=30,this.interval=null,this.cancelAnimation=!1,this.initialLeftPosition=this.element.style.left}setCastDebugger(e){this.castdebugger=e}setProgress(e,t){this.element.style.width=e/t*100+"%"}showHide(e){this.castdebugger.debug("showHide",`${e} ${this.show}`),this.show?this.element.parentElement.style.display="block":setTimeout((()=>{this.element.parentElement.style.display="none"}),e)}setColor(e){this.element.style.backgroundColor=e}animateSeekbar(){this.element.style.position="absolute";let e=this.element.parentElement.clientWidth;const t=()=>{try{let s=this.element.getBoundingClientRect().left,i=(this.element.parentElement.getBoundingClientRect().right,this.element.parentElement.getBoundingClientRect().left),a=this.element.parentElement.getBoundingClientRect().right;if(this.element.clientWidth<=e/4&&s<=i?this.element.style.width=`${this.element.clientWidth+this.speed}px`:s+this.element.clientWidth<a?this.element.style.left=`${s+this.speed}px`:s<a?(this.element.style.left=`${s+this.speed}px`,this.element.style.width=this.element.clientWidth-this.speed+"px"):(this.element.style.left=`${i}px`,this.element.style.width="0px"),this.cancelAnimation)return;window.requestAnimationFrame(t)}catch(e){console.log(e),console.log(e.toString())}};window.requestAnimationFrame(t)}reset(){this.cancelAnimation=!0,this.element.style.width="0%",this.element.style.left=this.initialLeftPosition,this.element.style.position="relative"}}(".seekbar-progress"),this.timer=new class{constructor(e){this.element=document.querySelector(e),this.element.textContent="00:00 / 00:00"}update(e,t){this.element.textContent=`${a(e)} /${a(t)}`}}(".timer"),this.castDebugger=null,this.element=document.querySelector(e),this.overlay=this.element.parentElement,this.info=this.overlay.children[0],this.show=!0,this.loader=document.querySelector(".loader"),this.playIcon=document.querySelector(".vp-icon-play"),this.pauseIcon=document.querySelector(".vp-icon-pause"),this.videoInfo=document.querySelector(".video-info"),this.splashScreen=document.querySelector(".splash-screen"),this.thumbnail=document.querySelector("#thumbnail"),this.receiver=t}setCastDebugger(e){this.castDebugger=e,this.seekbar.setCastDebugger(this.castDebugger)}pause(){this.pauseIcon.style.display="none",this.playIcon.style.display="block",setTimeout((()=>{this.playIcon.style.display="none"}),2e3)}play(){this.playIcon.style.display="none",this.pauseIcon.style.display="block",setTimeout((()=>{this.pauseIcon.style.display="none"}),2e3)}update(e){this.seekbar.setProgress(e.currentTime,e.duration),this.timer.update(e.currentTime,e.duration)}hideControls(e){this.show=!1,this.showHide(e||5e3)}showControls(){this.show=!0,this.showHide(10)}resetOverlay(){setTimeout((()=>{this.seekbar.reset(),this.info.style.display="none"}),3e3)}showHide(e){this.show?this.element.style.display="flex":setTimeout((()=>{this.element.style.display="none"}),e)}initOverlay(e){this.splashScreen.style.display="none",this.overlay.style.display="block";try{e.images.length>0&&e&&(this.thumbnail.src=e.images[0].url,this.videoInfo.children[0].textContent=e.title,this.videoInfo.children[1].textContent=e.description),this.seekbar.animateSeekbar()}catch(e){}}};var n=s(468),o=s.n(n);class d{static DEBUG_VAST_SERVICE="DEBUG_VAST_SERVICE";constructor(e){this.receiver=e,this.adContainer=document.querySelector(".adContainer"),this.adsDisplayContainer=null,this.adsLoader=null,this.adsDisplayInitialized=!1,this.currentAds=null,this.initialized=!1,this.autoplayAllowed=!1,this.autoplayRequiresMuted=!1,this.hasErrors=!1,this.adUI=null,this.adDuration=0}init(){this.initialized=!0,google.ima.settings.setVpaidMode(google.ima.ImaSdkSettings.VpaidMode.ENABLED),this.adsDisplayContainer=new google.ima.AdDisplayContainer(this.adContainer,this.receiver.video),this.adsLoader=new google.ima.AdsLoader(this.adsDisplayContainer),this.adsLoader.getSettings().setPlayerType("cast/client-side"),this.adsLoader.addEventListener(google.ima.AdsManagerLoadedEvent.Type.ADS_MANAGER_LOADED,this.onAdsManagerLoaded.bind(this),!1),this.adsLoader.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR,this.onAdError,!1),this.adUI=new(o())(this.receiver)}onAllAdsCompleted(e){this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE,"ad completed")}onAdCompleted(e){this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE,"ad completed"),this.adUI.disable(),this.adsManager&&this.adsManager.destroy(),!this.hasErrors&&this.receiver.isAdPlaying&&this.receiver.onEnd()}onContentPauseRequested(e){this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE,"Content Pause Request")}onContentResumeRequested(){this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE,"Content Resume Request")}onAdLoaded(e){this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE,"Ad loaded")}loadAds(e,t){this.currentAds={},this.initialized||this.init(),this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE,"load "+e),e?(this.currentAds.content=e,this.currentAds.type="url"):t&&(this.currentAds.content=t,this.currentAds.type="xml"),this.currentAds.currentAdIndex=0,this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE),"url"===this.currentAds.type?this.load(this.currentAds.content):this.load(null,this.currentAds.content)}load(e,t){if(this.initialized||this.init(),this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE,"Initialized"+this.vastUrl),this.adsRequest=new google.ima.AdsRequest,e)this.adsRequest.adTagUrl=e;else{if(!t)return;this.adsRequest.adsResponse=t}this.adsRequest.linearAdSlotWidth=this.receiver.video.clientWidth,this.adsRequest.linearAdSlotHeight=this.receiver.video.clientHeight,this.adsRequest.nonLinearAdSlotWidth=this.receiver.video.clientWidth,this.adsRequest.nonLinearAdSlotHeight=this.receiver.video.clientHeight/3,this.adsRequest.setAdWillAutoPlay(this.autoplayAllowed),this.adsRequest.setAdWillPlayMuted(this.autoplayRequiresMuted),this.adsRequest.vastLoadTimeout=8e3,this.adsLoader.requestAds(this.adsRequest)}onTimeUpdate(e){const t=e.getAdData();this.adsManager.getCurrentAd()?.getAdId()?.toString(),this.receiver.receiverControls.update({currentTime:t.currentTime,duration:t.duration}),this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE," ON TIME UPDATE")}onAdSkip(e){this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE,"ON AD Ski")}onAdStarted(e){this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE,"ON AD STARTED"),this.receiver.isAdPlaying=!0,this.adUI.enable()}onAdsManagerLoaded(e){this.adsManager&&this.adsManager.destroy(),this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE," before getadsmanager");const t=new google.ima.AdsRenderingSettings;this.adsManager=e.getAdsManager(this.receiver.video,t),this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE," after getadsmanager"),this.adsManager.addEventListener(google.ima.AdErrorEvent.Type.AD_ERROR,this.onAdError.bind(this)),this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE," after onaderror"),this.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_PAUSE_REQUESTED,this.onContentPauseRequested.bind(this)),this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE," after onContentPauseRequested"),this.adsManager.addEventListener(google.ima.AdEvent.Type.CONTENT_RESUME_REQUESTED,this.onContentResumeRequested.bind(this)),this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE," after onAllAdsCompleted"),this.adsManager.addEventListener(google.ima.AdEvent.Type.ALL_ADS_COMPLETED,this.onAllAdsCompleted.bind(this)),this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE," after onAdLoaded"),this.adsManager.addEventListener(google.ima.AdEvent.Type.LOADED,this.onAdLoaded.bind(this)),this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE," after onAdStarted"),this.adsManager.addEventListener(google.ima.AdEvent.Type.STARTED,this.onAdStarted.bind(this)),this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE," after onAdCompleted"),this.adsManager.addEventListener(google.ima.AdEvent.Type.COMPLETE,this.onAdCompleted.bind(this)),this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE," after onContentPauseRequested"),this.adsManager.addEventListener(google.ima.AdEvent.Type.SKIPPED,this.onAdSkip.bind(this)),this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE," after onAdSkip"),this.adsManager.addEventListener(google.ima.AdEvent.Type.AD_PROGRESS,this.onTimeUpdate.bind(this)),this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE," after onTimeUpdate"),this.adsManager.addEventListener(google.ima.AdEvent.Type.AD_BUFFERING,(()=>{this.loading=!0})),this.adsManager.addEventListener(google.ima.AdEvent.Type.SKIPPABLE_STATE_CHANGED,(()=>{Utils.fire(this.adContainer,Events.adEvents.AD_SKIPPABLE,{currentTime:this.player.video.currentTime,adPlayId:this.adsManager.getCurrentAd()?.getAdId()})})),this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE," just before playing ad"),this.playAds()}playAds(){this.adsDisplayInitialized||(this.adsDisplayContainer.initialize(),this.adsDisplayInitialized=!0);const e=this.receiver.video.clientWidth,t=this.receiver.video.clientHeight;try{this.receiver.isAdPlaying=!0,this.adsManager.init(e,t,google.ima.ViewMode.FULLSCREEN),this.adsManager.start(),this.receiver.receiverControls.loader.style.display="none"}catch(e){this.receiver.castDebugLogger.debug(this.VastService.DEBUG_VAST_SERVICE,"AdsManager could not be started"+e.getMessage())}}onAdError(e){this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE," ad error"+e),this.hasErrors=!0,this.receiver.onEnd().bind(this.receiver)}resume(){this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE,"RESUMING AD Event"),this.adsManager&&this.adsManager.resume()}pause(){this.receiver.castDebugLogger.debug(d.DEBUG_VAST_SERVICE,"PAUSE AD Event"),this.adsManager&&this.adsManager.pause()}}const h=d;function l(e,s){let a=new class{constructor(e,s){this.context=null,this.playerManager=null,this.castDebugLogger=null,this.appId=s.appId,this.video=document.querySelector(e),this.playbackConfig=null,this.controls=null,this.hls=null,this.videoObject={},this.videoContainer=this.video.parentElement,this.playbackRate=1,this.autoplay=!1,this.receiverControls=new r(".controls",this),this.mediaManager=null,this.castReceiverManager=null,this.videoStarted=!1,this.vastService=new h(this),this.config={},this.ads=[],this.debugTags={LOAD_REQUEST:"LOAD_REQUEST",ATTACH_MEDIA:"ATTACH_MEDIA",ONPLAY:"ON_PLAY",START:"START",INIT:"INIT",EVENTS:"EVENTS",ONEND:"ONEND",BROADCAST:"BROADCAST",ONTIMEUPDATEE:"ONTIMEUPDATE"},this.config={...t(),...s},this.isAdPlaying=!1,this.NAMESPACE="urn:x-cast:tech.gjirafa.vp-service",this.receiverControls=new r(".controls",this)}start(){this.receiverControls.resetOverlay(),this.castDebugLogger.debug(this.debugTags.START,"Starting video..."),this.broadcast(this.debugTags.START+"Starting video..."),this.onPlay()}onPlay(){this.castDebugLogger.debug("on play",this.video.getAttribute("src")),this.broadcast("on play"+this.video.getAttribute("src")),this.castDebugLogger.debug("isadplaying",this.isAdPlaying),this.isAdPlaying?this.vastService.resume():this.video.play().then((()=>{this.videoStarted?this.receiverControls.play():(this.receiverControls.showControls(),this.videoStarted=!0)})).catch((e=>{this.onPause(),this.castDebugLogger.debug(this.debugTags.ONPLAY," Couldn't play video.Tring one more time "+e),this.broadcast(" Couldn't play video.Tring one more time "+e.toString())}))}onPause(){this.isAdPlaying?this.vastService.pause():this.video.pause(),this.receiverControls.pause(),this.receiverControls.showControls()}addPlayerEvents(){this.video.addEventListener("timeupdate",this.onTimeUpdate),this.video.addEventListener("ended",this.onEnd.bind(this))}broadcast(e){this.castDebugLogger.debug(this.debugTags.BROADCAST,e),this.context&&this.context.sendCustomMessage(this.NAMESPACE,void 0,e)}onEnd(){this.castDebugLogger.debug("on End",this.config.replay);try{this.isAdPlaying?(this.broadcast({message:"Ad finished",code:2,time:this.currentTime}),this.hls&&this.hls.destroy(),this.isAdPlaying=!1):this.broadcast({message:"Video finished",code:3})}catch(e){this.castDebugLogger.error(this.debugTags.ONEND," Error"+e.toString())}return null}onTimeUpdate(){if(!this.isAdPlaying){try{if(this.ads.adCuePoints.includes(Math.floor(this.video.currentTime))&&!this.isAdPlaying)return this.onPause(),this.currentTime=Math.floor(this.video.currentTime),this.isAdPlaying=!0,this.vastService.loadAds(this.ads.vasts[0][0],this.ads.vasts[0][1]),this.hls&&this.hls.destroy(),this.ads.vasts.pop(),void this.ads.adCuePoints.pop()}catch(e){this.castDebugLogger.error(this.debugTags.ONTIMEUPDATE,e.toString())}this.receiverControls.update(this.updatePlayerState())}}updatePlayerState(){return{currentTime:this.video.currentTime,duration:this.videoObject.duration||this.video.duration}}attachMedia(){if(vpReceiver.HLSsupported=Hls.isSupported(),this.castDebugLogger.debug("inside attach media",vpReceiver.HLSsupported),this.video.playbackRate=1,this.castDebugLogger.debug("video file",JSON.stringify(this.video,["id","className","tagName"])),this.broadcast({message:"video file"+JSON.stringify(this.video,["id","className","tagName"])}),this.videoObject.file.endsWith("mp4"))this.castDebugLogger.debug("inside mp4",this.videoObject.file),this.video.src=this.videoObject.file,this.start();else if(vpReceiver.HLSsupported){this.castDebugLogger.debug("inside hlssupported",this.videoObject.file);try{this.hls=new Hls(i),this.castDebugLogger.debug("hls initialized",this.videoObject.file),this.broadcast({message:"hls initialized "+this.videoObject.file}),console.log("attachMedia "+this.currentTime),this.hls.on(Hls.Events.MEDIA_ATTACHED,(()=>{this.castDebugLogger.debug("amedia attached",this.videoObject.file),this.castDebugLogger.debug("loading source hlssupported",this.videoObject.file),this.currentTime>0&&(this.video.currentTime=this.currentTime),this.hls.loadSource(this.videoObject.file)})),this.hls.on(Hls.Events.MANIFEST_PARSED,((e,t)=>{this.castDebugLogger.debug("manifest parsed",this.videoObject.file),this.currentTime>0&&(this.video.currentTime=this.currentTime),this.start()})),this.hls.on(Hls.Events.ERROR,((e,t)=>{this.castDebugLogger.debug("HLS  ERROR",t.details)})),this.hls.attachMedia(this.video)}catch(e){}}this.castDebugLogger.debug("finished attach media")}fakeinit(){let e=this;this.castDebugLogger={debug:function(t,s){"object"==typeof s&&2==s.code&&(e.video.currentTime=s.time,setTimeout((()=>{e.attachMedia()}),700)),console.log(t,s)},error:function(e,t){console.log(e,t)}},this.receiverControls.setCastDebugger(this.castDebugLogger),this.videoObject.file="https://vp.gjirafa.net/vps/prod/odgehtyo/encode/vjsmyjhs/hls/master_file.m3u8",this.videoObject.duration=119,this.receiverControls.seekbar.animateSeekbar(),this.receiverControls.initOverlay({title:"Some title",images:[{url:"https://liki.gjirafa.com/api/media/gjvideo/yqz0gq/retina.jpg"}]}),this.ads={adCuePoints:[10],vasts:[["https://vp-dev.gjirafa.net/vps/content/vast/preroll-2.xml",null]]},setTimeout((()=>{this.attachMedia()}),5e3),this.bindMethods(),this.addPlayerEvents()}init(){this.context=cast.framework.CastReceiverContext.getInstance(),this.context.setLoggerLevel(cast.framework.LoggerLevel.DEBUG),this.castDebugLogger=cast.debug.CastDebugLogger.getInstance(),this.castDebugLogger.setEnabled(!0),this.castDebugLogger.debug(this.debugTags.INIT,"castdebugger initialized"),this.playerManager=this.context.getPlayerManager(),this.playerManager.setMediaElement(this.video),this.receiverControls.setCastDebugger(this.castDebugLogger);const e=new cast.framework.CastReceiverOptions;e.customNamespaces={},e.customNamespaces[this.NAMESPACE]=cast.framework.system.MessageType.JSON,this.context.start(e),this.bindMethods(),this.bindInterceptors(),this.addPlayerEvents()}onSeek(e){this.video.currentTime=e.currentTime,this.receiverControls.showControls(),this.receiverControls.hideControls(6e3),this.receiverControls.update(this.updatePlayerState())}drawButtons(){this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_SECONDARY_1,cast.framework.ui.ControlsButton.QUEUE_PREV),this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_PRIMARY_1,cast.framework.ui.ControlsButton.CAPTIONS),this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_PRIMARY_2,cast.framework.ui.ControlsButton.SEEK_FORWARD_15),this.controls.assignButton(cast.framework.ui.ControlsSlot.SLOT_SECONDARY_2,cast.framework.ui.ControlsButton.QUEUE_NEXT)}bindInterceptors(){this.context.addEventListener(cast.framework.system.EventType.SENDER_DISCONNECTED,(e=>{window.close()})),this.context.addCustomMessageListener(this.NAMESPACE,(e=>{this.castDebugLogger.debug(this.debugTags.EVENTS,"addCustomMessageListener"+e.data),2==JSON.parse(e.data).code&&this.attachMedia()})),this.playerManager.setMessageInterceptor(cast.framework.messages.MessageType.LOAD,this.onLoadRequest.bind(this)),this.playerManager.setMessageInterceptor(cast.framework.messages.MessageType.PLAY,this.onPlay.bind(this)),this.playerManager.setMessageInterceptor(cast.framework.messages.MessageType.PAUSE,this.onPause.bind(this)),this.playerManager.setMessageInterceptor(cast.framework.messages.MessageType.SEEK,this.onSeek.bind(this))}bindMethods(){this.bindInterceptors=this.bindInterceptors.bind(this),this.onLoadRequest=this.onLoadRequest.bind(this),this.attachMedia=this.attachMedia.bind(this),this.start=this.start.bind(this),this.addPlayerEvents=this.addPlayerEvents.bind(this),this.onTimeUpdate=this.onTimeUpdate.bind(this),this.onPlay=this.onPlay.bind(this),this.onPause=this.onPause.bind(this),this.updatePlayerState=this.updatePlayerState.bind(this),this.onEnd=this.onEnd.bind(this)}onLoadRequest(e){this.hls&&this.hls.destroy(),this.receiverControls.initOverlay(e.media.metadata),this.castDebugLogger.debug("VPreceiver",e.media.contentId),this.castDebugLogger.debug("VPreceiver1",Hls.isSupported()),this.videoObject.file=e.media.contentId,this.videoObject.duration=e.media.metadata.duration,this.currentTime=e.currentTime,this.playbackRate=e.playbackRate,this.autoplay=e.autoplay,e.requireAds&&(this.ads={adCuePoints:[10],vasts:[[e.customData.vastUrl,e.customData.vastXml]]}),this.config.replay=void 0===e.replay||e.replay;try{this.attachMedia(),this.broadcast({message:"attaching media"})}catch(e){this.broadcast({message:e.toString(),stack:e.stack})}return null}addBreaks(e){return castDebugLogger.debug(LOG_RECEIVER_TAG,"addBreaks: "+JSON.stringify(e)),fetchMediaById("fbb_ad").then((t=>{e.breakClips=[{id:"fbb_ad",title:t.title,contentUrl:t.stream.dash,contentType:"application/dash+xml",whenSkippable:5}],e.breaks=[{id:"pre-roll",breakClipIds:["fbb_ad"],position:0}]}))}fetchMediaById(e){return castDebugLogger.debug(LOG_RECEIVER_TAG,"fetching id: "+e),new Promise(((t,s)=>{fetch(CONTENT_URL).then((e=>e.json())).then((i=>{i?i[e]?t(i[e]):s(`${e} not found in repository`):s("Content repository not found.")}))}))}}(e,s);return a.init(),l.receiver=a,a}l.HLSsupported=!1,window.vpReceiver=l})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,